{"config":{"indexing":"full","lang":["fr"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentation du projet SOFTware Pr\u00e9sentation Je suis Samuel Scalbert ( LinkedIn ) , expert en fouille de donn\u00e9es textuelle et documentaire \u00e0 l' INRIA . Je contribue \u00e0 plusieurs projets innovants pour transformer la mani\u00e8re dont nous \u00e9valuons, partageons et utilisons la recherche scientifique : GRASP-OS : repenser l\u2019\u00e9valuation de la recherche avec des m\u00e9triques ouvertes et responsables, align\u00e9es sur la science ouverte. SoFAIR : am\u00e9liorer la d\u00e9couvrabilit\u00e9 et l\u2019archivage des logiciels scientifiques, pour une recherche plus reproductible. Datalake INRIA : structurer et centraliser toute la production scientifique d\u2019INRIA, en exploitant Grobid et Softcite. D\u00e9veloppement de logiciels : cr\u00e9ation de quatre logiciels facilitant l\u2019analyse, l\u2019extraction et la gestion des connaissances dans l\u2019\u00e9cosyst\u00e8me scientifique, dans le cadre du projet SOFTware . Ces projets ont un objectif commun : rendre la recherche plus ouverte, interop\u00e9rable et efficace . Objectifs du projet SOFTware Le projet SOFTware vise \u00e0 d\u00e9velopper des outils permettant de : Faciliter l\u2019analyse et l\u2019extraction de connaissances dans le domaine scientifique. Optimiser la gestion des donn\u00e9es pour les chercheurs et les institutions. Encourager la r\u00e9utilisation et la reproductibilit\u00e9 des r\u00e9sultats scientifiques gr\u00e2ce \u00e0 des solutions open source. Gen\u00e8se du projet Au fil de mes recherches, j\u2019ai d\u00e9velopp\u00e9 des outils pour faciliter et monitorer mes r\u00e9sultats et exp\u00e9riences . Initialement con\u00e7us pour un usage personnel, ces applications ont suscit\u00e9 l\u2019int\u00e9r\u00eat de mes coll\u00e8gues. Afin de les rendre accessibles et utilisables par tous, j\u2019ai d\u00e9cid\u00e9 d\u2019adopter une approche open source . Tous les logiciels d\u00e9velopp\u00e9s dans le cadre du projet SOFTware sont des Proof of Concept (POC). Licence et contributions Le projet SOFTware est enti\u00e8rement open source . Toute contribution est la bienvenue ! Pour signaler un bug ou proposer une am\u00e9lioration, ouvrez une issue . Pour contribuer au code, soumettez une pull request . Contact Si vous souhaitez en savoir plus ou collaborer sur ce projet, n\u2019h\u00e9sitez pas \u00e0 me contacter : \ud83d\udce7 Samuel Scalbert \ud83d\udd17 Linkedin","title":"Home"},{"location":"#documentation-du-projet-software","text":"","title":"Documentation du projet SOFTware"},{"location":"#presentation","text":"Je suis Samuel Scalbert ( LinkedIn ) , expert en fouille de donn\u00e9es textuelle et documentaire \u00e0 l' INRIA . Je contribue \u00e0 plusieurs projets innovants pour transformer la mani\u00e8re dont nous \u00e9valuons, partageons et utilisons la recherche scientifique : GRASP-OS : repenser l\u2019\u00e9valuation de la recherche avec des m\u00e9triques ouvertes et responsables, align\u00e9es sur la science ouverte. SoFAIR : am\u00e9liorer la d\u00e9couvrabilit\u00e9 et l\u2019archivage des logiciels scientifiques, pour une recherche plus reproductible. Datalake INRIA : structurer et centraliser toute la production scientifique d\u2019INRIA, en exploitant Grobid et Softcite. D\u00e9veloppement de logiciels : cr\u00e9ation de quatre logiciels facilitant l\u2019analyse, l\u2019extraction et la gestion des connaissances dans l\u2019\u00e9cosyst\u00e8me scientifique, dans le cadre du projet SOFTware . Ces projets ont un objectif commun : rendre la recherche plus ouverte, interop\u00e9rable et efficace .","title":"Pr\u00e9sentation"},{"location":"#objectifs-du-projet-software","text":"Le projet SOFTware vise \u00e0 d\u00e9velopper des outils permettant de : Faciliter l\u2019analyse et l\u2019extraction de connaissances dans le domaine scientifique. Optimiser la gestion des donn\u00e9es pour les chercheurs et les institutions. Encourager la r\u00e9utilisation et la reproductibilit\u00e9 des r\u00e9sultats scientifiques gr\u00e2ce \u00e0 des solutions open source.","title":"Objectifs du projet SOFTware"},{"location":"#genese-du-projet","text":"Au fil de mes recherches, j\u2019ai d\u00e9velopp\u00e9 des outils pour faciliter et monitorer mes r\u00e9sultats et exp\u00e9riences . Initialement con\u00e7us pour un usage personnel, ces applications ont suscit\u00e9 l\u2019int\u00e9r\u00eat de mes coll\u00e8gues. Afin de les rendre accessibles et utilisables par tous, j\u2019ai d\u00e9cid\u00e9 d\u2019adopter une approche open source . Tous les logiciels d\u00e9velopp\u00e9s dans le cadre du projet SOFTware sont des Proof of Concept (POC).","title":"Gen\u00e8se du projet"},{"location":"#licence-et-contributions","text":"Le projet SOFTware est enti\u00e8rement open source . Toute contribution est la bienvenue ! Pour signaler un bug ou proposer une am\u00e9lioration, ouvrez une issue . Pour contribuer au code, soumettez une pull request .","title":"Licence et contributions"},{"location":"#contact","text":"Si vous souhaitez en savoir plus ou collaborer sur ce projet, n\u2019h\u00e9sitez pas \u00e0 me contacter : \ud83d\udce7 Samuel Scalbert \ud83d\udd17 Linkedin","title":"Contact"},{"location":"about/","text":"Tum innumeris mutant hoc rigidoque Misereri aut tuos Lorem markdownum carpit hos vidit, a perdes redeuntia robora iactanti regia, fluitantia e fletu . Silvamque vestigia possunt ad quodsi tamen; arvis fecundus paulatim simul Demoleon vertar marinae, ubi natasque. Heros frontem, et quotiens locus. ip *= offline * recursive(4) + repository(4, paste, fileVramPiconet.encoding.jsf_file(disk_bloatware_path, seo)); if (scalableIt.runtime(unfriend(console + optical), 88, driveCard)) { property += cgi_spreadsheet + server_excel_jumper; } xslt_mpeg = nvramAbend; var wrap_dvd = throughput; Cognoscere nomine dubitaret Tot et, pugnant pulsat . Haut vulnere volenti; extensus ne possit! Sed latus cervice venasque aequora desinit. Certo fecundique scelerata gelidus balatum, nam mortalia sinistro amens similis. Agi stricto innixus merui ad mihi nostro mortis hic quoque tanta: pollice mortalibus eram . if (tcpIcon < -2) { pngOperation = index; } if (postWebCybersquatter != unfriendManagementWebsite.exportFlatbedSearch( jsf_unit_input + 90)) { scrollAlignment -= markupCaps * personal + toggle_service; utf(gibibyte_software_asp, eccMultitasking); raw.jfs_virus(clientRteAddress - 1); } if (boot_kilohertz(memory_exploit + access)) { token = link_cyberbullying; prompt_process_direct.intelligence(2 + inkjet, rdramSerialDvd); installerConsole(malware.dvd(sli), degaussRssPim, io * tcpArchie); } else { errorApi.page_integrated_drive -= -1 / bounceBufferCtp; } Dum crescere moveri spatium elisi: est, et saxum fulgura mortalem Liber medicamina mente rorantesque. Orbis prodiga Elateia, Saturnia caelo; admissa per; nec cepi semineces tectus obicit contraxit quisquis Hypsipyles. Herbas amante se cum Iuno vel densumque unde munere, luctibus obstipuere, ait Hectora sceleri, expertus stirpe Andros. Tractataque sanguine belloque tela coepit te tamen omnia flores radicibus principio et dumque. Murmura hastae inmansuetumque, unde effervescere levia, consternantur nisi nullumque, femina premebat iter summaque, inponit. Memor totidemque Mavortis viae fremit Gutture foedera Iunone iam recepi vocem. Vero pollice demi exsultantemque corpus in Colchide artem. languageCase(5 + dataGnutellaRecursion, active_cd); var honeypot = dynamic; if (1) { responsive_console += softwareWebVideo; animated_dslam_requirements = wavelength.dayMysqlBespoke(clientIp, pptpScrollWired); } else { characterSdsl.gbps_youtube = gopherCompile; eupTrojanIpv += lpi_expansion_data; powerpoint_trash.mysqlAddressIcio(software - pushMini, 4); } var server_web_bandwidth = username; if (vduDhcpThick) { multithreading(hard_metal_task); batch = nameComputer.archive_port(cybersquatter - parallel); } else { cybercrime(software_error_excel, pseudocode + 5); nosql(bar_thick); } De callo oculis : iam ulli ait; est vox, mansit. Cyllenius et tollite vota sic tenuit, sua fit quae illa in celanda meliore.","title":"About"},{"location":"about/#tum-innumeris-mutant-hoc-rigidoque","text":"","title":"Tum innumeris mutant hoc rigidoque"},{"location":"about/#misereri-aut-tuos","text":"Lorem markdownum carpit hos vidit, a perdes redeuntia robora iactanti regia, fluitantia e fletu . Silvamque vestigia possunt ad quodsi tamen; arvis fecundus paulatim simul Demoleon vertar marinae, ubi natasque. Heros frontem, et quotiens locus. ip *= offline * recursive(4) + repository(4, paste, fileVramPiconet.encoding.jsf_file(disk_bloatware_path, seo)); if (scalableIt.runtime(unfriend(console + optical), 88, driveCard)) { property += cgi_spreadsheet + server_excel_jumper; } xslt_mpeg = nvramAbend; var wrap_dvd = throughput;","title":"Misereri aut tuos"},{"location":"about/#cognoscere-nomine-dubitaret","text":"Tot et, pugnant pulsat . Haut vulnere volenti; extensus ne possit! Sed latus cervice venasque aequora desinit. Certo fecundique scelerata gelidus balatum, nam mortalia sinistro amens similis. Agi stricto innixus merui ad mihi nostro mortis hic quoque tanta: pollice mortalibus eram . if (tcpIcon < -2) { pngOperation = index; } if (postWebCybersquatter != unfriendManagementWebsite.exportFlatbedSearch( jsf_unit_input + 90)) { scrollAlignment -= markupCaps * personal + toggle_service; utf(gibibyte_software_asp, eccMultitasking); raw.jfs_virus(clientRteAddress - 1); } if (boot_kilohertz(memory_exploit + access)) { token = link_cyberbullying; prompt_process_direct.intelligence(2 + inkjet, rdramSerialDvd); installerConsole(malware.dvd(sli), degaussRssPim, io * tcpArchie); } else { errorApi.page_integrated_drive -= -1 / bounceBufferCtp; } Dum crescere moveri spatium elisi: est, et saxum fulgura mortalem Liber medicamina mente rorantesque. Orbis prodiga Elateia, Saturnia caelo; admissa per; nec cepi semineces tectus obicit contraxit quisquis Hypsipyles. Herbas amante se cum Iuno vel densumque unde munere, luctibus obstipuere, ait Hectora sceleri, expertus stirpe Andros. Tractataque sanguine belloque tela coepit te tamen omnia flores radicibus principio et dumque. Murmura hastae inmansuetumque, unde effervescere levia, consternantur nisi nullumque, femina premebat iter summaque, inponit.","title":"Cognoscere nomine dubitaret"},{"location":"about/#memor-totidemque-mavortis-viae-fremit","text":"Gutture foedera Iunone iam recepi vocem. Vero pollice demi exsultantemque corpus in Colchide artem. languageCase(5 + dataGnutellaRecursion, active_cd); var honeypot = dynamic; if (1) { responsive_console += softwareWebVideo; animated_dslam_requirements = wavelength.dayMysqlBespoke(clientIp, pptpScrollWired); } else { characterSdsl.gbps_youtube = gopherCompile; eupTrojanIpv += lpi_expansion_data; powerpoint_trash.mysqlAddressIcio(software - pushMini, 4); } var server_web_bandwidth = username; if (vduDhcpThick) { multithreading(hard_metal_task); batch = nameComputer.archive_port(cybersquatter - parallel); } else { cybercrime(software_error_excel, pseudocode + 5); nosql(bar_thick); } De callo oculis : iam ulli ait; est vox, mansit. Cyllenius et tollite vota sic tenuit, sua fit quae illa in celanda meliore.","title":"Memor totidemque Mavortis viae fremit"},{"location":"check/","text":"","title":"SOFTware-Check"},{"location":"hub/","text":"Pr\u00e9sentation du projet SOFTware-HUB ne fonctionne que sur Linux . L'objectif est de permettre de lancer le pipeline SOFTware automatiquement. Le projet comprend trois scripts Bash et un script Python . SOFTware-HUB s'occupe de lancer les trois conteneurs Docker n\u00e9cessaires au bon fonctionnement du pipeline (et de supprimer les conteneurs en trop). Pr\u00e9requis Installer les d\u00e9pendances du Hub : pip install -r requirements.txt Concernant les pr\u00e9requis, il faudra installer manuellement les quatre applications suivantes : SOFTware-Viz ou la version Light: SOFTware-Viz-Light SOFTware-Sync Grobid CLIENT Softcite CLIENT Il est fortement conseill\u00e9 de les installer dans le m\u00eame dossier, au m\u00eame niveau que cette application, de cette mani\u00e8re : \u251c\u2500\u2500 SOFTware \u2502 \u251c\u2500\u2500 grobid_client_python \u2502 \u251c\u2500\u2500 SOFTware-Hub \u2502 \u251c\u2500\u2500 software_mentions_client \u2502 \u251c\u2500\u2500 SOFTware-Sync \u2502 \u2514\u2500\u2500 SOFTware-Viz Si vous souhaitez modifier l'emplacement des applications, il est possible d'\u00e9diter le fichier config.json (il est aussi possible de changer la version des images Docker si n\u00e9cessaire) : \u251c\u2500\u2500 SOFTware-Hub \u2502 \u251c\u2500\u2500 ... \u2502 \u2514\u2500\u2500 config.json Lancement de l'application DATA CREATOR Le premier script \u00e0 lancer va uniquement cr\u00e9er un dossier ../data avec tous les sous-dossiers n\u00e9cessaires. ./DATA_CREATOR.sh Il faut ensuite ins\u00e9rer vos PDF dans le dossier suivant : \u251c\u2500\u2500 data \u2502 \u251c\u2500\u2500 json_files \u2502 \u251c\u2500\u2500 pdf_files (<---- ici) \u2502 \u251c\u2500\u2500 xml_files \u2502 \u251c\u2500\u2500 xml_grobid \u2502 \u2514\u2500\u2500 xml_meta DATA PROCESSOR Pour traiter toutes ces donn\u00e9es, il faut d'abord ex\u00e9cuter le script qui v\u00e9rifie les Docker , les environnements virtuels et l'installation des d\u00e9pendances depuis GitHub : python main.py R\u00e9sultat attendu : (venv) sscalber@ss-inria:~/Bureau/SOFTware/SOFTware-Hub$ python main.py Application check completed. \u250f\u2513\u250f\u2513\u250f\u2513\u250f\u2533\u2513 \u2513\u250f \u2513 \u2517\u2513\u2503\u2503\u2523 \u2503 \u2513\u250f\u250f\u250f\u2513\u250f\u2513\u250f\u2513\u2501\u2501\u2523\u252b\u2513\u250f\u2523\u2513 \u2517\u251b\u2517\u251b\u253b \u253b \u2517\u253b\u251b\u2517\u253b\u251b \u2517 \u251b\u2517\u2517\u253b\u2517\u251b Checking (image): grobid/grobid:0.8.0 grobid/grobid:0.8.0 available Checking (image): grobid/software-mentions:0.8.0 grobid/software-mentions:0.8.0 available nvidia-smi not found. No NVIDIA GPU is available or the NVIDIA drivers are not installed. Kept container: 'priceless_wu' running with image grobid/grobid:0.8.0 on port :{'8070/tcp': [{'HostIp': '0.0.0.0', 'HostPort': '8070'}, {'HostIp': '::', 'HostPort': '8070'}]} Kept container: 'dazzling_morse' running with image grobid/software-mentions:0.8.0 on port :{'8060/tcp': [{'HostIp': '0.0.0.0', 'HostPort': '8060'}, {'HostIp': '::', 'HostPort': '8060'}]} --------------------------------------------- Checking application: Grobid_client Verifying repository path: ../grobid_client_python Repository path exists --------------------------------------------- Checking application: Softcite_client Verifying repository path: ../software_mentions_client Repository path exists Checking for virtual environment: ../software_mentions_client/venv venv folder found --------------------------------------------- Checking application: SOFTware-Sync Verifying repository path: ../SOFTware-Sync Repository path exists Checking for virtual environment: ../SOFTware-Sync/venv venv folder found --------------------------------------------- Checking application: SOFTware-Viz Verifying repository path: ../SOFTware-Sync Repository path exists Checking for virtual environment: ../SOFTware-Sync/venv venv folder found Enfin, il faut lancer le script pour traiter les fichiers PDF : ./DATA_PROCESSOR.sh R\u00e9sultat attendu : (venv) sscalber@ss-inria:~/Bureau/SOFTware/SOFTware-Hub$ ./DATA_PROCESSOR.sh Installing Grobid Client... Running Grobid Client GROBID server is up and running runtime: 60.102 seconds Are you satisfied with the Grobid result? (y/n): y Proceeding with the next step. Organizing XML files... Activating virtual environment for Software Mentions Client... Running Software Mentions Client... logs are written in client.log total process: 5 - accumulated runtime: 71.806 s - 0.07 files/s --- total entries: 7 --- total successfully processed: 7 --- total failed: 0 --- Are you satisfied with the Software Mentions Client result? (y/n): y Proceeding to the end of the pipeline. DATA VISUALIZER (\u00e0 venir) DATA VISUALIZER LIGHT (\u00e0 venir)","title":"SOFTware-Hub"},{"location":"hub/#presentation-du-projet","text":"SOFTware-HUB ne fonctionne que sur Linux . L'objectif est de permettre de lancer le pipeline SOFTware automatiquement. Le projet comprend trois scripts Bash et un script Python . SOFTware-HUB s'occupe de lancer les trois conteneurs Docker n\u00e9cessaires au bon fonctionnement du pipeline (et de supprimer les conteneurs en trop).","title":"Pr\u00e9sentation du projet"},{"location":"hub/#prerequis","text":"Installer les d\u00e9pendances du Hub : pip install -r requirements.txt Concernant les pr\u00e9requis, il faudra installer manuellement les quatre applications suivantes : SOFTware-Viz ou la version Light: SOFTware-Viz-Light SOFTware-Sync Grobid CLIENT Softcite CLIENT Il est fortement conseill\u00e9 de les installer dans le m\u00eame dossier, au m\u00eame niveau que cette application, de cette mani\u00e8re : \u251c\u2500\u2500 SOFTware \u2502 \u251c\u2500\u2500 grobid_client_python \u2502 \u251c\u2500\u2500 SOFTware-Hub \u2502 \u251c\u2500\u2500 software_mentions_client \u2502 \u251c\u2500\u2500 SOFTware-Sync \u2502 \u2514\u2500\u2500 SOFTware-Viz Si vous souhaitez modifier l'emplacement des applications, il est possible d'\u00e9diter le fichier config.json (il est aussi possible de changer la version des images Docker si n\u00e9cessaire) : \u251c\u2500\u2500 SOFTware-Hub \u2502 \u251c\u2500\u2500 ... \u2502 \u2514\u2500\u2500 config.json","title":"Pr\u00e9requis"},{"location":"hub/#lancement-de-lapplication","text":"","title":"Lancement de l'application"},{"location":"hub/#data-creator","text":"Le premier script \u00e0 lancer va uniquement cr\u00e9er un dossier ../data avec tous les sous-dossiers n\u00e9cessaires. ./DATA_CREATOR.sh Il faut ensuite ins\u00e9rer vos PDF dans le dossier suivant : \u251c\u2500\u2500 data \u2502 \u251c\u2500\u2500 json_files \u2502 \u251c\u2500\u2500 pdf_files (<---- ici) \u2502 \u251c\u2500\u2500 xml_files \u2502 \u251c\u2500\u2500 xml_grobid \u2502 \u2514\u2500\u2500 xml_meta","title":"DATA CREATOR"},{"location":"hub/#data-processor","text":"Pour traiter toutes ces donn\u00e9es, il faut d'abord ex\u00e9cuter le script qui v\u00e9rifie les Docker , les environnements virtuels et l'installation des d\u00e9pendances depuis GitHub : python main.py R\u00e9sultat attendu : (venv) sscalber@ss-inria:~/Bureau/SOFTware/SOFTware-Hub$ python main.py Application check completed. \u250f\u2513\u250f\u2513\u250f\u2513\u250f\u2533\u2513 \u2513\u250f \u2513 \u2517\u2513\u2503\u2503\u2523 \u2503 \u2513\u250f\u250f\u250f\u2513\u250f\u2513\u250f\u2513\u2501\u2501\u2523\u252b\u2513\u250f\u2523\u2513 \u2517\u251b\u2517\u251b\u253b \u253b \u2517\u253b\u251b\u2517\u253b\u251b \u2517 \u251b\u2517\u2517\u253b\u2517\u251b Checking (image): grobid/grobid:0.8.0 grobid/grobid:0.8.0 available Checking (image): grobid/software-mentions:0.8.0 grobid/software-mentions:0.8.0 available nvidia-smi not found. No NVIDIA GPU is available or the NVIDIA drivers are not installed. Kept container: 'priceless_wu' running with image grobid/grobid:0.8.0 on port :{'8070/tcp': [{'HostIp': '0.0.0.0', 'HostPort': '8070'}, {'HostIp': '::', 'HostPort': '8070'}]} Kept container: 'dazzling_morse' running with image grobid/software-mentions:0.8.0 on port :{'8060/tcp': [{'HostIp': '0.0.0.0', 'HostPort': '8060'}, {'HostIp': '::', 'HostPort': '8060'}]} --------------------------------------------- Checking application: Grobid_client Verifying repository path: ../grobid_client_python Repository path exists --------------------------------------------- Checking application: Softcite_client Verifying repository path: ../software_mentions_client Repository path exists Checking for virtual environment: ../software_mentions_client/venv venv folder found --------------------------------------------- Checking application: SOFTware-Sync Verifying repository path: ../SOFTware-Sync Repository path exists Checking for virtual environment: ../SOFTware-Sync/venv venv folder found --------------------------------------------- Checking application: SOFTware-Viz Verifying repository path: ../SOFTware-Sync Repository path exists Checking for virtual environment: ../SOFTware-Sync/venv venv folder found Enfin, il faut lancer le script pour traiter les fichiers PDF : ./DATA_PROCESSOR.sh R\u00e9sultat attendu : (venv) sscalber@ss-inria:~/Bureau/SOFTware/SOFTware-Hub$ ./DATA_PROCESSOR.sh Installing Grobid Client... Running Grobid Client GROBID server is up and running runtime: 60.102 seconds Are you satisfied with the Grobid result? (y/n): y Proceeding with the next step. Organizing XML files... Activating virtual environment for Software Mentions Client... Running Software Mentions Client... logs are written in client.log total process: 5 - accumulated runtime: 71.806 s - 0.07 files/s --- total entries: 7 --- total successfully processed: 7 --- total failed: 0 --- Are you satisfied with the Software Mentions Client result? (y/n): y Proceeding to the end of the pipeline.","title":"DATA PROCESSOR"},{"location":"hub/#data-visualizer-a-venir","text":"","title":"DATA VISUALIZER (\u00e0 venir)"},{"location":"hub/#data-visualizer-light-a-venir","text":"","title":"DATA VISUALIZER LIGHT (\u00e0 venir)"},{"location":"sync/","text":"SOFTWare-Sync Aper\u00e7u Objectif : L'application SOFTware-Sync traite des ensembles de fichiers XML ou PDF g\u00e9n\u00e9r\u00e9s par GROBID , ainsi que des fichiers JSON provenant de SOFTCITE , afin de produire soit des fichiers XML enrichis, soit des fichiers CSV r\u00e9sumant les mentions de logiciels. Types de fichiers en entr\u00e9e : Sorties GROBID : Fichiers XML ou PDF contenant des informations structur\u00e9es extraites de documents scientifiques. Sorties SOFTCITE : Fichiers JSON contenant les r\u00e9sultats de la d\u00e9tection de citations de logiciels. Options de sortie : Fichiers XML enrichis : Fichiers XML augment\u00e9s avec des d\u00e9tails sur chaque logiciel mentionn\u00e9 dans les documents d'entr\u00e9e. Fichiers CSV r\u00e9capitulatifs : Fichiers CSV listant chaque mention de logiciel d\u00e9tect\u00e9e dans les documents d'entr\u00e9e, accompagn\u00e9e des m\u00e9tadonn\u00e9es pertinentes. Installation Depuis la source Clonez le d\u00e9p\u00f4t SOFTware-Sync : git clone https://github.com/Samuel-Scalbert/SOFTware-Sync Acc\u00e9dez au r\u00e9pertoire du projet : cd SOFTware-Sync Installez les d\u00e9pendances : pip install -r requirements.txt Fonctionnalit\u00e9s Options disponibles pour SOFTware-Sync : 1. --enhance-dir : Am\u00e9liore plusieurs fichiers XML dans un r\u00e9pertoire en les associant aux fichiers JSON correspondants. Utilisation : python main.py --enhance-dir <chemin_dossier_xml> <chemin_dossier_json> 2. --enhance-file : Am\u00e9liore un fichier XML unique en l'associant \u00e0 un fichier JSON. Utilisation : python main.py --enhance-file <chemin_xml> <chemin_json> Options disponibles : \"--project\" / \"--only-mention\" 3. --builder : Construit des fichiers XML en combinant les fichiers Grobid TEI XML et les fichiers XML de m\u00e9tadonn\u00e9es. Utilisation : python main.py --builder <chemin_xml_grobid> <chemin_xml_meta> 4. --check-XML-META : V\u00e9rifie le nombre de fichiers XML disponibles par rapport au nombre de fichiers XML de m\u00e9tadonn\u00e9es. Utilisation : python main.py --check-XML-META <chemin_xml_grobid> <chemin_xml_meta> 5. --check-XML-JSON : V\u00e9rifie le nombre de fichiers XML disponibles par rapport au nombre de fichiers JSON. Utilisation : python main.py --check-XML-JSON <chemin_xml> <chemin_json> 6. --csv-creator : Cr\u00e9e un fichier CSV affichant le nombre de mentions et leurs occurrences pour un logiciel donn\u00e9. Utilisation : python main.py --csv-creator <chemin_json> 7. --mentions-checker : V\u00e9rifie les fichiers JSON de mentions vides. Utilisation : python main.py --mentions-checker <chemin_json> 8. --download-halid : T\u00e9l\u00e9charge des fichiers \u00e0 partir d'un identifiant HAL. Utilisation : python main.py --download-halid <chemin_csv> 9. --help, -h : Affiche ce message d'aide. Utilisation : python main.py --help Utilisation Depuis la source Ex\u00e9cutez SOFTware-Sync avec la commande suivante : python main.py Ex\u00e9cutez SOFTware-Sync pour enrichir plusieurs fichiers XML dans un r\u00e9pertoire en les associant aux fichiers JSON correspondants : python main.py --enhance-dir ../data/XML/ ../data/JSON/","title":"SOFTware-Sync"},{"location":"sync/#software-sync","text":"","title":"SOFTWare-Sync"},{"location":"sync/#apercu","text":"","title":"Aper\u00e7u"},{"location":"sync/#objectif","text":"L'application SOFTware-Sync traite des ensembles de fichiers XML ou PDF g\u00e9n\u00e9r\u00e9s par GROBID , ainsi que des fichiers JSON provenant de SOFTCITE , afin de produire soit des fichiers XML enrichis, soit des fichiers CSV r\u00e9sumant les mentions de logiciels.","title":"Objectif :"},{"location":"sync/#types-de-fichiers-en-entree","text":"Sorties GROBID : Fichiers XML ou PDF contenant des informations structur\u00e9es extraites de documents scientifiques. Sorties SOFTCITE : Fichiers JSON contenant les r\u00e9sultats de la d\u00e9tection de citations de logiciels.","title":"Types de fichiers en entr\u00e9e :"},{"location":"sync/#options-de-sortie","text":"Fichiers XML enrichis : Fichiers XML augment\u00e9s avec des d\u00e9tails sur chaque logiciel mentionn\u00e9 dans les documents d'entr\u00e9e. Fichiers CSV r\u00e9capitulatifs : Fichiers CSV listant chaque mention de logiciel d\u00e9tect\u00e9e dans les documents d'entr\u00e9e, accompagn\u00e9e des m\u00e9tadonn\u00e9es pertinentes.","title":"Options de sortie :"},{"location":"sync/#installation","text":"","title":"Installation"},{"location":"sync/#depuis-la-source","text":"Clonez le d\u00e9p\u00f4t SOFTware-Sync : git clone https://github.com/Samuel-Scalbert/SOFTware-Sync Acc\u00e9dez au r\u00e9pertoire du projet : cd SOFTware-Sync Installez les d\u00e9pendances : pip install -r requirements.txt","title":"Depuis la source"},{"location":"sync/#fonctionnalites","text":"Options disponibles pour SOFTware-Sync : 1. --enhance-dir : Am\u00e9liore plusieurs fichiers XML dans un r\u00e9pertoire en les associant aux fichiers JSON correspondants. Utilisation : python main.py --enhance-dir <chemin_dossier_xml> <chemin_dossier_json> 2. --enhance-file : Am\u00e9liore un fichier XML unique en l'associant \u00e0 un fichier JSON. Utilisation : python main.py --enhance-file <chemin_xml> <chemin_json> Options disponibles : \"--project\" / \"--only-mention\" 3. --builder : Construit des fichiers XML en combinant les fichiers Grobid TEI XML et les fichiers XML de m\u00e9tadonn\u00e9es. Utilisation : python main.py --builder <chemin_xml_grobid> <chemin_xml_meta> 4. --check-XML-META : V\u00e9rifie le nombre de fichiers XML disponibles par rapport au nombre de fichiers XML de m\u00e9tadonn\u00e9es. Utilisation : python main.py --check-XML-META <chemin_xml_grobid> <chemin_xml_meta> 5. --check-XML-JSON : V\u00e9rifie le nombre de fichiers XML disponibles par rapport au nombre de fichiers JSON. Utilisation : python main.py --check-XML-JSON <chemin_xml> <chemin_json> 6. --csv-creator : Cr\u00e9e un fichier CSV affichant le nombre de mentions et leurs occurrences pour un logiciel donn\u00e9. Utilisation : python main.py --csv-creator <chemin_json> 7. --mentions-checker : V\u00e9rifie les fichiers JSON de mentions vides. Utilisation : python main.py --mentions-checker <chemin_json> 8. --download-halid : T\u00e9l\u00e9charge des fichiers \u00e0 partir d'un identifiant HAL. Utilisation : python main.py --download-halid <chemin_csv> 9. --help, -h : Affiche ce message d'aide. Utilisation : python main.py --help","title":"Fonctionnalit\u00e9s"},{"location":"sync/#utilisation","text":"","title":"Utilisation"},{"location":"sync/#depuis-la-source_1","text":"Ex\u00e9cutez SOFTware-Sync avec la commande suivante : python main.py Ex\u00e9cutez SOFTware-Sync pour enrichir plusieurs fichiers XML dans un r\u00e9pertoire en les associant aux fichiers JSON correspondants : python main.py --enhance-dir ../data/XML/ ../data/JSON/","title":"Depuis la source"},{"location":"viz/","text":"Pr\u00e9sentation du projet \ud83d\uded1 Cette application est actuellement con\u00e7ue pour interagir avec HAL et r\u00e9colter des m\u00e9tadonn\u00e9es li\u00e9es \u00e0 la base de donn\u00e9es. \ud83d\uded1 Une version plus l\u00e9g\u00e8re de l\u2019application est en cours de d\u00e9veloppement, permettant \u00e0 chacun de cr\u00e9er sa propre application sans n\u00e9cessiter de connexion \u00e0 HAL . -> SOFTware-Viz-Light Base de donn\u00e9es de PDF Le processus commence avec une base de donn\u00e9es de fichiers PDF acad\u00e9miques qui doivent \u00eatre extraits et trait\u00e9s. GROBID Les fichiers PDF sont envoy\u00e9s \u00e0 GROBID , un outil permettant d\u2019extraire des donn\u00e9es structur\u00e9es (comme des informations bibliographiques) \u00e0 partir de PDF acad\u00e9miques. GROBID g\u00e9n\u00e8re en sortie des fichiers XML , rendant l\u2019information lisible par machine. SOFTCITE Apr\u00e8s GROBID , les donn\u00e9es extraites sont transmises \u00e0 SOFTCITE , qui g\u00e9n\u00e8re des fichiers JSON . SOFTCITE analyse les citations, les mentions de logiciels ou d\u2019autres informations de r\u00e9f\u00e9rence pr\u00e9sentes dans les PDF . SOFTware-Sync Les fichiers XML et JSON extraits sont ensuite trait\u00e9s par SOFTware-Sync , un outil qui synchronise ces donn\u00e9es dans un fichier XML unique. SOFTware-Viz SOFTware-Viz est charg\u00e9 de la visualisation des donn\u00e9es trait\u00e9es. Il prend les donn\u00e9es synchronis\u00e9es par SOFTware-Sync et les transforme en tableaux de bord ou autres repr\u00e9sentations graphiques. ArangoDB Les donn\u00e9es trait\u00e9es sont stock\u00e9es dans ArangoDB , une base de donn\u00e9es NoSQL multi-mod\u00e8le , permettant la gestion des donn\u00e9es structur\u00e9es. Elle sert de stockage principal pour les informations et mentions extraites. Flask Flask est un framework web utilis\u00e9 pour d\u00e9velopper des applications web. Il interagit avec SOFTware-Viz (pour la visualisation) et ArangoDB (pour la r\u00e9cup\u00e9ration des donn\u00e9es). Installation Depuis la source Clonez le d\u00e9p\u00f4t : git clone ../ Acc\u00e9dez au r\u00e9pertoire du projet : cd ./SOFTware-viz Cr\u00e9ez un environnement virtuel : python -m venv env Installez l\u2019image Docker : docker pull arangodb/arangodb:3.11.6 Lancez un conteneur Docker : docker run -p 8529:8529 -e ARANGO_NO_AUTH=1 arangodb/arangodb:3.11.6 Cr\u00e9ez la base de donn\u00e9es SOF-viz : Allez sur http://localhost:8529/ et cr\u00e9ez manuellement la base de donn\u00e9es nomm\u00e9e **SOF-viz** Activez l\u2019environnement virtuel : source env/bin/activate Installez les d\u00e9pendances : pip install -r requirement.txt Lancez l\u2019application : python run.py Utilisation Depuis la source Ex\u00e9cutez l\u2019application avec la commande suivante ( la base de donn\u00e9es se cr\u00e9era automatiquement lors du premier lancement ) : python run.py","title":"SOFTware-Viz"},{"location":"viz/#presentation-du-projet","text":"\ud83d\uded1 Cette application est actuellement con\u00e7ue pour interagir avec HAL et r\u00e9colter des m\u00e9tadonn\u00e9es li\u00e9es \u00e0 la base de donn\u00e9es. \ud83d\uded1 Une version plus l\u00e9g\u00e8re de l\u2019application est en cours de d\u00e9veloppement, permettant \u00e0 chacun de cr\u00e9er sa propre application sans n\u00e9cessiter de connexion \u00e0 HAL . -> SOFTware-Viz-Light","title":"Pr\u00e9sentation du projet"},{"location":"viz/#base-de-donnees-de-pdf","text":"Le processus commence avec une base de donn\u00e9es de fichiers PDF acad\u00e9miques qui doivent \u00eatre extraits et trait\u00e9s.","title":"Base de donn\u00e9es de PDF"},{"location":"viz/#grobid","text":"Les fichiers PDF sont envoy\u00e9s \u00e0 GROBID , un outil permettant d\u2019extraire des donn\u00e9es structur\u00e9es (comme des informations bibliographiques) \u00e0 partir de PDF acad\u00e9miques. GROBID g\u00e9n\u00e8re en sortie des fichiers XML , rendant l\u2019information lisible par machine.","title":"GROBID"},{"location":"viz/#softcite","text":"Apr\u00e8s GROBID , les donn\u00e9es extraites sont transmises \u00e0 SOFTCITE , qui g\u00e9n\u00e8re des fichiers JSON . SOFTCITE analyse les citations, les mentions de logiciels ou d\u2019autres informations de r\u00e9f\u00e9rence pr\u00e9sentes dans les PDF .","title":"SOFTCITE"},{"location":"viz/#software-sync","text":"Les fichiers XML et JSON extraits sont ensuite trait\u00e9s par SOFTware-Sync , un outil qui synchronise ces donn\u00e9es dans un fichier XML unique.","title":"SOFTware-Sync"},{"location":"viz/#software-viz","text":"SOFTware-Viz est charg\u00e9 de la visualisation des donn\u00e9es trait\u00e9es. Il prend les donn\u00e9es synchronis\u00e9es par SOFTware-Sync et les transforme en tableaux de bord ou autres repr\u00e9sentations graphiques.","title":"SOFTware-Viz"},{"location":"viz/#arangodb","text":"Les donn\u00e9es trait\u00e9es sont stock\u00e9es dans ArangoDB , une base de donn\u00e9es NoSQL multi-mod\u00e8le , permettant la gestion des donn\u00e9es structur\u00e9es. Elle sert de stockage principal pour les informations et mentions extraites.","title":"ArangoDB"},{"location":"viz/#flask","text":"Flask est un framework web utilis\u00e9 pour d\u00e9velopper des applications web. Il interagit avec SOFTware-Viz (pour la visualisation) et ArangoDB (pour la r\u00e9cup\u00e9ration des donn\u00e9es).","title":"Flask"},{"location":"viz/#installation","text":"","title":"Installation"},{"location":"viz/#depuis-la-source","text":"Clonez le d\u00e9p\u00f4t : git clone ../ Acc\u00e9dez au r\u00e9pertoire du projet : cd ./SOFTware-viz Cr\u00e9ez un environnement virtuel : python -m venv env Installez l\u2019image Docker : docker pull arangodb/arangodb:3.11.6 Lancez un conteneur Docker : docker run -p 8529:8529 -e ARANGO_NO_AUTH=1 arangodb/arangodb:3.11.6 Cr\u00e9ez la base de donn\u00e9es SOF-viz : Allez sur http://localhost:8529/ et cr\u00e9ez manuellement la base de donn\u00e9es nomm\u00e9e **SOF-viz** Activez l\u2019environnement virtuel : source env/bin/activate Installez les d\u00e9pendances : pip install -r requirement.txt Lancez l\u2019application : python run.py","title":"Depuis la source"},{"location":"viz/#utilisation","text":"","title":"Utilisation"},{"location":"viz/#depuis-la-source_1","text":"Ex\u00e9cutez l\u2019application avec la commande suivante ( la base de donn\u00e9es se cr\u00e9era automatiquement lors du premier lancement ) : python run.py","title":"Depuis la source"},{"location":"viz_light/","text":"Pr\u00e9sentation du projet \ud83d\uded1 Cette version de SOFTware-Viz est la version universelle qui fonctionne avec tous les fichiers PDF et sans connexion \u00e0 HAL INRIA. \ud83d\uded1 Si vous utilisez des fichiers de HAL, vous devez utiliser la version originale SOFTware-Viz . Base de donn\u00e9es de PDF Le processus commence avec une base de donn\u00e9es de fichiers PDF acad\u00e9miques qui doivent \u00eatre extraits et trait\u00e9s. GROBID Les fichiers PDF sont envoy\u00e9s \u00e0 GROBID , un outil permettant d\u2019extraire des donn\u00e9es structur\u00e9es (comme des informations bibliographiques) \u00e0 partir de PDF acad\u00e9miques. GROBID g\u00e9n\u00e8re en sortie des fichiers XML , rendant l\u2019information lisible par machine. SOFTCITE Apr\u00e8s GROBID , les donn\u00e9es extraites sont transmises \u00e0 SOFTCITE , qui g\u00e9n\u00e8re des fichiers JSON . SOFTCITE analyse les citations, les mentions de logiciels ou d\u2019autres informations de r\u00e9f\u00e9rence pr\u00e9sentes dans les PDF . SOFTware-Sync Les fichiers XML et JSON extraits sont ensuite trait\u00e9s par SOFTware-Sync , un outil qui synchronise ces donn\u00e9es dans un fichier XML unique. SOFTware-Viz SOFTware-Viz est charg\u00e9 de la visualisation des donn\u00e9es trait\u00e9es. Il prend les donn\u00e9es synchronis\u00e9es par SOFTware-Sync et les transforme en tableaux de bord ou autres repr\u00e9sentations graphiques. ArangoDB Les donn\u00e9es trait\u00e9es sont stock\u00e9es dans ArangoDB , une base de donn\u00e9es NoSQL multi-mod\u00e8le , permettant la gestion des donn\u00e9es structur\u00e9es. Elle sert de stockage principal pour les informations et mentions extraites. Flask Flask est un framework web utilis\u00e9 pour d\u00e9velopper des applications web. Il interagit avec SOFTware-Viz (pour la visualisation) et ArangoDB (pour la r\u00e9cup\u00e9ration des donn\u00e9es). Installation Depuis la source Clonez le d\u00e9p\u00f4t : git clone ../ Acc\u00e9dez au r\u00e9pertoire du projet : cd ./SOFTware-viz Cr\u00e9ez un environnement virtuel : python -m venv env Installez l\u2019image Docker : docker pull arangodb/arangodb:3.11.6 Lancez un conteneur Docker : docker run -p 8529:8529 -e ARANGO_NO_AUTH=1 arangodb/arangodb:3.11.6 Cr\u00e9ez la base de donn\u00e9es SOF-viz : Allez sur http://localhost:8529/ et cr\u00e9ez manuellement la base de donn\u00e9es nomm\u00e9e **SOF-viz** Activez l\u2019environnement virtuel : source env/bin/activate Installez les d\u00e9pendances : pip install -r requirement.txt Lancez l\u2019application : python run.py Utilisation Depuis la source Ex\u00e9cutez l\u2019application avec la commande suivante ( la base de donn\u00e9es se cr\u00e9era automatiquement lors du premier lancement ) : python run.py","title":"SOFTware-Viz-Light"},{"location":"viz_light/#presentation-du-projet","text":"\ud83d\uded1 Cette version de SOFTware-Viz est la version universelle qui fonctionne avec tous les fichiers PDF et sans connexion \u00e0 HAL INRIA. \ud83d\uded1 Si vous utilisez des fichiers de HAL, vous devez utiliser la version originale SOFTware-Viz .","title":"Pr\u00e9sentation du projet"},{"location":"viz_light/#base-de-donnees-de-pdf","text":"Le processus commence avec une base de donn\u00e9es de fichiers PDF acad\u00e9miques qui doivent \u00eatre extraits et trait\u00e9s.","title":"Base de donn\u00e9es de PDF"},{"location":"viz_light/#grobid","text":"Les fichiers PDF sont envoy\u00e9s \u00e0 GROBID , un outil permettant d\u2019extraire des donn\u00e9es structur\u00e9es (comme des informations bibliographiques) \u00e0 partir de PDF acad\u00e9miques. GROBID g\u00e9n\u00e8re en sortie des fichiers XML , rendant l\u2019information lisible par machine.","title":"GROBID"},{"location":"viz_light/#softcite","text":"Apr\u00e8s GROBID , les donn\u00e9es extraites sont transmises \u00e0 SOFTCITE , qui g\u00e9n\u00e8re des fichiers JSON . SOFTCITE analyse les citations, les mentions de logiciels ou d\u2019autres informations de r\u00e9f\u00e9rence pr\u00e9sentes dans les PDF .","title":"SOFTCITE"},{"location":"viz_light/#software-sync","text":"Les fichiers XML et JSON extraits sont ensuite trait\u00e9s par SOFTware-Sync , un outil qui synchronise ces donn\u00e9es dans un fichier XML unique.","title":"SOFTware-Sync"},{"location":"viz_light/#software-viz","text":"SOFTware-Viz est charg\u00e9 de la visualisation des donn\u00e9es trait\u00e9es. Il prend les donn\u00e9es synchronis\u00e9es par SOFTware-Sync et les transforme en tableaux de bord ou autres repr\u00e9sentations graphiques.","title":"SOFTware-Viz"},{"location":"viz_light/#arangodb","text":"Les donn\u00e9es trait\u00e9es sont stock\u00e9es dans ArangoDB , une base de donn\u00e9es NoSQL multi-mod\u00e8le , permettant la gestion des donn\u00e9es structur\u00e9es. Elle sert de stockage principal pour les informations et mentions extraites.","title":"ArangoDB"},{"location":"viz_light/#flask","text":"Flask est un framework web utilis\u00e9 pour d\u00e9velopper des applications web. Il interagit avec SOFTware-Viz (pour la visualisation) et ArangoDB (pour la r\u00e9cup\u00e9ration des donn\u00e9es).","title":"Flask"},{"location":"viz_light/#installation","text":"","title":"Installation"},{"location":"viz_light/#depuis-la-source","text":"Clonez le d\u00e9p\u00f4t : git clone ../ Acc\u00e9dez au r\u00e9pertoire du projet : cd ./SOFTware-viz Cr\u00e9ez un environnement virtuel : python -m venv env Installez l\u2019image Docker : docker pull arangodb/arangodb:3.11.6 Lancez un conteneur Docker : docker run -p 8529:8529 -e ARANGO_NO_AUTH=1 arangodb/arangodb:3.11.6 Cr\u00e9ez la base de donn\u00e9es SOF-viz : Allez sur http://localhost:8529/ et cr\u00e9ez manuellement la base de donn\u00e9es nomm\u00e9e **SOF-viz** Activez l\u2019environnement virtuel : source env/bin/activate Installez les d\u00e9pendances : pip install -r requirement.txt Lancez l\u2019application : python run.py","title":"Depuis la source"},{"location":"viz_light/#utilisation","text":"","title":"Utilisation"},{"location":"viz_light/#depuis-la-source_1","text":"Ex\u00e9cutez l\u2019application avec la commande suivante ( la base de donn\u00e9es se cr\u00e9era automatiquement lors du premier lancement ) : python run.py","title":"Depuis la source"}]}